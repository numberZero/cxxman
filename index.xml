<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>C++</title>

<style>

body {
	margin: 1.0em 1.5em;
}

html {
	font-family: "Nimbus Sans", sans-serif;
	font-size: 12pt;
	line-height: 1.25em;
}

@media screen and (max-width: 15cm) {
	html {
		font-size: 8pt;
	}
}

@media screen and not (max-width: 15cm) {
	body {
		margin: 1.0em 10%;
	}
}

a:link {
	color: #48C;
	text-decoration: underline;
}

a:visited {
	color: #84D;
	text-decoration: underline;
}

a[href^="#"] {
	text-decoration: dashed underline;
}

p {
	margin: 0.0em 0.0em 1.25em;
}

p ul {
	margin: 0.25em 0.0em;
}

h1 { font-size: 2.0em; color: #9BF; }
h2 { font-size: 1.6em; color: #48C; }
h3 { font-size: 1.2em; color: #148; }
h4 { font-size: 1.0em; color: #148; }

h1, h2, h3, h4 {
	margin: 0.7em 0.0em 0.3em;
}

section.advanced {
	font-size: 0.8em;
	margin: 0.2em 3.0em;
}

.note {
	font-size: 0.8em;
	font-style: italic;
	margin-left: 2.5em;
	border-left: 0.25em solid #999;
	padding-left: 0.375em;
}

.note:before {
	content: "Замечание: ";
	font-weight: bold;
}

.note.unlabeled:before {
	content: none;
}

code {
	font-family: "Nimbus Mono PS", monospace;
	font-variant-ligatures: none;
	white-space: nowrap;
	color: #037;
}

code.block {
	display: block;
	color: inherit;
	text-align: left;
	margin: 0.2em 2.0em;
	border-left: 0.2em solid #9AD;
	padding-left: 0.3em;
	white-space: pre;
}

code.ruby {
	ruby-position: under;
}

code.ruby item {
	display: ruby;
}

code.ruby desc {
	font-family: "Nimbus Sans", sans-serif;
	text-align: center;
	font-size: 0.6em;
	color: #36F;
	display: ruby-text;
}

</style>

</head>
<body>
<section>
<h1>Основы</h1>

<section>
<h2>Управляющие конструкции</h2>
<section>
<h3>Ветвления</h3>
(if, switch)
</section>
<section>
<h3>Циклы</h3>
(for, while, do...while)
</section>
</section>

<section>
<h2>Функции</h2>
<p><em>Функцией</em> в C++ называется любая подпрограмма, даже если она не возвращает никакого значения. Любая функция состоит из заголовка, определяющего, как она может быть использована, и тела, определяющего выполняемые функцией действия. Заголовок выглядит следующим образом:
<code class="block ruby"><item>int<desc>возвращаемый тип</desc></item> <item>some_func<desc>имя</desc></item>(<item>int arg1, long *arg2<desc>аргументы</desc></item>)</code>
Если аргументов нет, скобки остаются пустыми (либо можно поставить слово <code>void</code>, как в C). Если функция не должна возвращать значение, в качестве его типа указывается <code>void</code>.</p>

<p>Тело функции — это (почти всегда) блок, т. е. заключённая в фигурные скобки последовательность операторов. Внутри тела аргументы функции могут использоваться, как обычные переменные, но их начальные значения передаются извне, при вызове. Для возврата значения и выхода из функции используется оператор <code>return</code>:
<code class="block ruby">return <item>some_value<desc>возвращаемое значение</desc></item>;</code>
Если функция должна возвращать значение (т. е. её тип отличен от <code>void</code>), то его использование обязательно. В противном случае он пишется без аргумента:
<code class="block">return;</code>
и в конце функции не требуется (но может быть использован в любом месте).
</p>

<p>Язык C++ позволяет использовать лишь те функции, которые определены или объявлены выше места использования. Объявление функции состоит только из заголовка и завершается точкой с запятой:
<code class="block">double sin(double x);
</code>

и позволяет вынести определение функции в другой файл (или просто ниже места использования). Имена аргументов в объявлении указывать не обязательно, но рекомендуется для читаемости кода. Вложенные функции не допускаются.</p>

<section>
<h3>Перегрузка функций</h3>
<p>C++ позволяет определить несколько функций с одним именем при условии, что они принимают аргументы разных типов, например:
<code class="block">int print(double value);
void print(const char *string);
</code>
При обращении к функции компилятор выбирает наиболее подходящий вариант, применяя при необходимости преобразования типов; например, <code>print(12.5)</code> соответствует первому варианту, <code>print("Привет")</code> — второму, а <code>print(6)</code> — снова первому, т. к. <code>int</code> приводится к <code>double</code>; возвращаемый тип при этом не учитывается. Если таких вариантов несколько, то программа не скомпилируется; например, если добавить функцию <code>int print(float value)</code>, то вызов <code>print(6)</code> станет некорректным, поскольку <code>int</code> приводится и к <code>float</code>, и к <code>double</code>. В таких случаях приведение типов нужно делать явно, например, <code>print((float)6)</code>.</p>
</section>

<section>
<h3>Значения по умолчанию</h3>
<p>В простых случаях вместо перегрузки функций можно обойтись указанием значений по умолчанию для последних аргументов:
<code class="block">void walk(double distance, double speed = 3.0,
	const char *comment = "Куда идём мы с пятачком...");
</code>
Эти значения будут использованы, если вызвать функцию с меньшим числом аргументов, чем у неё есть. Например, следующие вызовы будут эквивалентны:
<code class="block">walk(4.2);
walk(4.2, 3.0);
walk(4.2, 3.0, "Куда идём мы с пятачком...");
</code>
Обратите внимание: значения по умолчанию нужно указывать <em>только один раз</em>, при (первом) объявлении функции. Только если объявления функции нет, значения по умолчанию можно указать прямо в определении.</p>

<p>Сочетание с перегрузкой возможно, но все варианты должны быть различимы. Благодаря значениям по умолчанию функция <code>walk</code> из примера как бы распадается на 3:
<code class="block">void walk(double distance);
void walk(double distance, double speed);
void walk(double distance, double speed, const char *comment);
</code>
и, соответственно, такие варианты добавлять нельзя. Но, например, <code>void walk(const char *destination)</code> добавить можно.
</p>
</section>

</section>

<section>
<h2>Пользовательские типы</h2>
<section>
<h3>Структуры</h3>
</section>
<section>
<h3>Перечисления</h3>
</section>
<section>
<h3>Объединения</h3>
</section>
</section>

<section>
<h2>Разное</h2>
<section>
<h3>Управление памятью</h3>
<p>Если в C есть функции <code>malloc</code> и <code>free</code> для динамического выделения памяти, то в C++ для тех же целей есть специальные <em>операторы</em> — <code>new</code> и <code>delete</code> (для массивов — <code>new[]</code> и <code>delete[]</code>). Используются следующим образом:
<code class="block">int *dyn_var_1 = new int;
int *dyn_var_2 = new int(3); // или new int{3}; будет создан int со значением 3
int *dyn_array = new int[3]; // создаёт массив из 3 int’ов
delete[] dyn_array; // квадратные скобки обязательны!
delete dyn_var_1;
delete dyn_var_2;
</code>
Отличие от <code>malloc</code> и <code>free</code> в том, что помимо выделения и освобождения памяти будут вызваны соответствующие конструкторы и деструкторы (если они нетривиальны, конечно; подробнее см. в <a href="#Раздел_Классы">разделе «Классы»</a>). Аналога функции <code>realloc</code> нет.</p>
<p>В то же время в современном C++ явное использование этих операторов считается дурным тоном, т. к. слишком легко допустить утечку памяти, например. В реальных программах всегда следует использовать обёртки наподобие <code>std::unique_ptr</code>, <code>std::vector</code> (см. <a href="#Раздел_STL">раздел «STL»</a>), или даже свои — но отдельные от основной логики программы.</p>
</section>
</section>

</section>

<section id="Раздел_Классы">
<h1>Классы</h1>
<p>Одно из основных отличий C++ от C — наличие классов. В каком-то смысле класс — это просто структура с привязанными функциями (и даже определяться может ключевым словом <code>struct</code>):
<code class="block">struct MyClass {
	int counter;
	float multiplier;
	float countValue(int add) {
		counter += add;
		return multiplier * counter + add;
	}
};
</code>
однако есть несколько важных различий.</p>

<section id="Классы_Методы">
<h2>Методы</h2>
<p>В теле класса можно объявлять и определять функции. Такие функции называются <em>методами</em> класса. Вызоз метода осуществляется аналогично обращению к полю структуры (класса):
<code class="block">MyClass my_class_variable;
/*...*/
float v = my_class_variable.countValue(17);
</code>
При этом помимо явных аргументов метод неявно получает аргумент <code>this</code> — указатель на объект, для которого он вызван (здесь это <code>&amp;my_class_variable</code>, тип <code>MyClass *</code>). В самом же методе можно обращаться к полям класса — это будет обращением к соответствующему полю <code>this</code> (если только нет аргумента или локальной переменной с тем же именем); например, <code>multiplier</code> в методе выше — это то же самое, что <code>this->multiplier</code>, т. е. <code>my_class_variable.multiplier</code>.</p>

<section class="advanced">
<h4>Модификаторы методов</h4>
<p>Существует множество способов изменить отдельные аспекты поведения метода. Простейшие примеры — модификаторы <code>static</code> и <code>const</code>:
<code class="block">struct SomeClass {
	int counter;
	float multiplier;
	float getValue(float add) const {
		// multiplier *= add; // недопустимо
		return multiplier * counter + add;
	}
	static float Combine(SomeClass *a, SomeClass *b) {
		// float x = multiplier; // недопустимо
		return a->multiplier * b->counter + b->multiplier * a->counter;
	}
};
</code>
Метка <code>const</code> означает, что <code>this</code> будет иметь тип «указатель на константный объект» (в данном случае — <code>SomeClass const *</code>), что не позволит изменять поля класса. <code>static</code>, в свою очередь, вообще убирает <code>this</code> — такой метод мало чем отличается от обычной («свободной») функции, и может быть вызван без объекта: <code>SomeClass::Combine(&amp;var1, &amp;var2)</code>.</p>
</section>

<p>В целом методы ведут себя практически так же, как обычные функции, только с дополнительным аргументом. Также можно разделить объявление и определение, только в определении нужно указывать полное имя метода, вместе с именем класса:
<code class="block">struct MyClass {
	/*...*/
	float countValue(int add);
};
float MyClass::countValue(int add) {
/*...*/
}
</code>
Также можно перегружать методы (в т. ч. по наличию некоторых модификаторов, в первую очередь <code>const</code>).
</p>

<section id="Классы_Методы_КонструкторыДеструкторы">
<h3>Конструкторы и деструкторы</h3>
<p>Это, пожалуй, одно из главных отличий C++ от C. В каждом классе, даже если не написаны явно, присутствуют специальные методы — <em>конструктор</em> (может быть перегружен) и <em>деструктор</em> (всегда единственен). Конструктор вызывается при создании объекта данного класса, деструктор — при уничтожении:
<code class="block">void my_function() {
	MyClass my_class_variable; // здесь вызывается конструктор my_class_variable
	/*...*/
	float v = my_class_variable.countValue(17);
} // здесь вызывается деструктор my_class_variable
</code></p>

<p>Конструктор не имеет возвращаемого типа, а его имя совпадает с именем класса. Он может принимать любые наборы аргументов, но есть специальные конструкторы: <em>конструктор по умолчанию</em>, не принимающий аргументов вообще, и <em>конструктор копирования</em>, принимающий ссылку (обычно константную) на объект того же класса; эти конструкторы при необходимости добавляются самим компилятором (что не всегда желательно).</p>

<p class="note">специальные конструкторы могут иметь дополнительные аргументы, если для них указаны значения по умолчанию.</p>

<p>Деструктор не имеет ни аргументов, ни возвращаемого типа, а его имя получается приписыванием <code>~</code> к имени класса: <code>~MyClass()</code>. Он вызывается при уничтожении объекта.</p>

<p class="note unlabeled">Правила хорошего тона гласят: если в классе есть конструктор, скорее всего, должен быть и деструктор; а если есть деструктор, точно должен быть и конструктор копирования, и <a href="#ОператорПрисваивания">оператор копирования</a>.</p>

<section class="example">
<h4>Пример:</h4>
<code class="block">struct MyClass {
	MyClass(); // конструктор по умолчанию
	MyClass(MyClass const &amp;b); // конструктор копирования
	MyClass(int x); // просто конструктор
	~MyClass(); // деструктор
	/*...*/
};

void my_function() {
	MyClass c1; // здесь вызывается конструктор по умолчанию
	if (some_value > 0) {
		MyClass c2{}; // здесь тоже
		MyClass c3(1); // здесь вызывается конструктор MyClass(int x)
		/*...*/
	} // здесь вызываются деструкторы c3 и c2 (именно в таком порядке)
	/*...*/
	MyClass c4{1}; // здесь вызывается конструктор MyClass(int x)
	MyClass c5 = 1; // и здесь
	MyClass c6(c1); // а здесь вызывается конструктор копирования
	/*...*/
} // здесь вызываются деструкторы c6, c5, c4, c1 (именно в таком порядке)
</code>
</section>

<p>И вызов конструктора, и вызов деструктора <em>обязательны</em>, и ставятся самим компилятором:
<ul>
<li>для локальных переменных: конструктор — в точку определения, деструктор — в конец области видимости (в порядке, обратном порядку определения),</li>
<li>для динамически создаваемых: конструктор — в <code>new</code>, деструктор — в <code>delete</code>,</li>
<li>для глобальных: конструктор — перед <code>main</code>, деструктор — после <code>main</code>,</li>
<li>для полей класса: конструктор — в начало каждого конструктора содержащего класса (в порядке определения полей), деструктор — в конец его деструктора (в обратном порядке).</li>
</ul>
Кроме того, при передаче объекта по значению (<code>void f(MyClass x)</code>) для создания <code>x</code> вызывается его конструктор (обычно копирования), а при возврате управления, соответственно, — деструктор.
</p>

<p>Как правило, конструктор используется для выделения памяти, а деструктор — для её освобождения. При этом надо помнить: если вы не написали конструктор копирования, <em>компилятор сделает это за вас</em> — но далеко не универсальным способом: его конструктор будет просто копировать все поля; для чисел это пригодно, однако если класс при уничтожении (в деструкторе) должен освободить память, деструкторы <em>обоих экземпляров</em> попытаются освободить одну и ту же область памяти (т. н. double-free), что недопустимо. Поэтому в нетривиальных классах конструктор копирования необходимо писать явно.</p>

<p>Краткое пояснение по оператору копирования: это специальный метод, который используется при присваивании уже существующей переменной объекта того же типа:
<code class="block">struct MyClass {/*...*/};
void f(MyClass &amp;c) {
	MyClass x = c; // здесь используется <em>конструктор</em> копирования
	MyClass y;
	y = c; // а здесь — <em>оператор</em> копирования
}
</code>
Заголовок оператора копирования класса <code>Some</code> обычно имеет вид <code>Some &amp;operator= (Some const &amp;)</code>, однако стандартом регламентирован только тип аргумента; это должен быть <code>Some</code> либо ссылка на него (не обязательно константная).</p>

<section class="example">
<h4>Пример «безопасного» класса:</h4>
<p><code class="block">struct DynArray {
	int *data;
	int length;

	DynArray() { // конструктор по умолчанию
		data = nullptr; // или NULL
		length = 0;
	}

	DynArray(int new_length) {
		data = new int[new_length];
		length = new_length;
	}

	DynArray(DynArray const &amp;b) { // конструктор копирования
		data = new int[b.length];
		length = b.length;
		for (int k = 0; k &lt; length; k++)
			data[k] = b.data[k];
	}

	~DynArray() { // деструктор
		delete[] data;
	}

	DynArray &amp;operator= (DynArray &amp;b) { // оператор копирования
		delete[] data;
		data = new int[b.length];
		length = b.length;
		for (int k = 0; k &lt; length; k++)
			data[k] = b.data[k];
		return *this; // это обязательно!
	}
};
</code></p>
<p>Оператор копирования можно реализовать и так:
<code class="block">DynArray &amp;operator= (DynArray b) {
	std::swap(data, b.data);
	std::swap(length, b.length);
	return *this; // всё равно обязательно =)
}
</code>
</p>
</section>

</section> <!-- Конструкторы и деструкторы -->

<section id="Классы_Методы_ПерегрузкаОператоров">
<h3>Перегрузка операторов</h3>
</section> <!-- Перегрузка операторов -->

<section id="Классы_Методы_СпециальныеОператоры">
<h3>Специальные операторы</h3>
<p>Некоторые операторы могут быть перегружены только методами, но не свободными функциями. Это операторы <code>=</code> (но не <code>+=</code> и др.), <code>-></code>, <code>()</code> и <code>[]</code>.</p>
<section id="ОператорПрисваивания">
<h4>Оператор <code>=</code> (присваивания, копирования, перемещения)</h4>
</section>
<section>
<h4>Оператор <code>-></code> (косвенного обращения)</h4>
</section>
<section>
<h4>Оператор <code>()</code> (вызова)</h4>
</section>
<section>
<h4>Оператор <code>[]</code> (индексирования)</h4>
</section>
</section> <!-- Специальные операторы -->

</section> <!-- Методы -->
</section> <!-- Классы -->

<section id="Раздел_Исключения">
<h1>Исключения</h1>
</section>

<section id="Раздел_Шаблоны">
<h1>Шаблоны</h1>
</section>

<section id="Раздел_STL">
<h1>STL</h1>
</section>

</body>
</html>
